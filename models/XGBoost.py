# -*- coding: utf-8 -*-
"""XGBoost.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N8W3C4-_3wMLCQu0JyPDb-cKjHybQtRK
"""

import pandas as pd
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error
import matplotlib.pyplot as plt

# Load data
train_df = pd.read_csv('dataset/train.csv')
test_df = pd.read_csv('dataset/test.csv')

print("Train shape:", train_df.shape)
print("Test shape:", test_df.shape)

# Convert datetime and extract time features
train_df['date'] = pd.to_datetime(train_df['date'])
test_df['date'] = pd.to_datetime(test_df['date'])

for df in [train_df, test_df]:
    df['hour'] = df['date'].dt.hour
    df['day_of_week'] = df['date'].dt.dayofweek
    df['month'] = df['date'].dt.month
    df['day_of_year'] = df['date'].dt.dayofyear

train_df = train_df.drop(columns=['date'])
test_df = test_df.drop(columns=['date'])

# Define features and target
target = 'consumption'
features = [col for col in train_df.columns if col != target]

X_train = train_df[features]
y_train = train_df[target]
X_test = test_df[features]
y_test = test_df[target]

# Handle missing values
X_train = X_train.fillna(X_train.mean())
X_test = X_test.fillna(X_train.mean())

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# DMatrix conversion
train_dmatrix = xgb.DMatrix(X_train_scaled, label=y_train)
test_dmatrix = xgb.DMatrix(X_test_scaled, label=y_test)

# XGBoost parameters (no RMSE)
params = {
    "objective": "reg:squarederror",
    "max_depth": 6,
    "eta": 0.1,
    "subsample": 0.8,
    "colsample_bytree": 0.8
}

# Train-validation split
X_train_split, X_val_split, y_train_split, y_val_split = train_test_split(
    X_train_scaled, y_train, test_size=0.2, random_state=42, shuffle=False
)

train_split_dmatrix = xgb.DMatrix(X_train_split, label=y_train_split)
val_dmatrix = xgb.DMatrix(X_val_split, label=y_val_split)

# Train model
xgb_model = xgb.train(
    params,
    train_split_dmatrix,
    num_boost_round=1000,
    evals=[(val_dmatrix, "validation")],
    early_stopping_rounds=50,
    verbose_eval=False
)

# Predictions
preds = xgb_model.predict(test_dmatrix)

# Final evaluation
mse = mean_squared_error(y_test, preds)
mae = mean_absolute_error(y_test, preds)

print(f"Mean Squared Error (MSE): {mse:.4f}")
print(f"Mean Absolute Error (MAE): {mae:.4f}")
